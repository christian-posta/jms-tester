<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd" >

  <!-- This will try to locate a BrokerServiceFactory and initialize all brokers there -->
  <bean id="brokerServicesFactory" class="com.fusesource.forge.jmstest.config.impl.SpringBrokerServicesFactory" />
  
  <!-- We need to have a Release Manger around that keeps track of beans that have resources allocated and can release them if required. -->    
  <bean id="releaseManager" class="com.fusesource.forge.jmstest.benchmark.ReleaseManager" init-method="initialise" />

  <!--  The message Factory responsible to create the test messages -->  
  <bean id="messageFactory" class="com.fusesource.forge.jmstest.message.DefaultMessageFactory">
    <property name="messageSize" value="100" />
    <property name="prefix" value="Hello" />
  </bean>

  <!-- A Connection provider is needed to establish the JMS Connections used by the test framework -->
  <bean id="connectionProvider" class="com.fusesource.forge.jmstest.config.impl.DefaultJMSConnectionProvider">
    <property name="connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616" />
      </bean>
    </property>
  </bean> 
    
  <!--  A Destination Provider is needed to create the Destinations for Producers / Consumers -->
  <bean id="destinationProvider" class="com.fusesource.forge.jmstest.config.impl.DefaultDestinationProvider" />

  <!--  The Test config bean encapsulates the overall settings for our test -->
  <bean id="TestConfig" class="com.fusesource.forge.jmstest.config.TestRunConfig">
    <property name="runId" value="1" />
    <!--  The test subject destination -->
    <property name="testDestinationName" value="queue:test" />
    <!--  The admin destination from producers to consumers -->
    <property name="adminFromProducer" value="queue:test.admin.producer" />
    <!--  The admin destination from consumers to producers -->
    <property name="adminFromConsumer" value="queue:test.admin.consumer" />
    <!-- PERSRISTENT | NON_PERSISTENT -->
    <property name="deliveryMode" value="NON_PERSISTENT" />
    <!-- How do we acknowledge messages -->
    <property name="acknowledgeMode" value="AUTO_ACKNOWLEDGE" />
    <!-- Run with JMS transactions ? -->
    <property name="transacted" value="false" />
    <!-- How many consumers do we want to run ? -->
    <property name="numConsumers" value="1" />
  </bean>
  
  <!-- The configuration of a Producer prototype bean-->
  <bean id="messageProducer" class="com.fusesource.forge.jmstest.executor.BenchmarkProducer" scope="prototype" >
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
    <property name="releaseManager" ref="releaseManager" />
    <property name="messageFactory" ref="messageFactory" />
  </bean>
  
  <!-- The factory used to create producers -->
  <bean id="messageProducerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="messageProducer"/>
    </property>
  </bean>
  
  <!-- A benchmark iteration runner is used to run enough producers in order to sustain a given message load -->
  <bean id="benchmarkIterationRunner" class="com.fusesource.forge.jmstest.executor.IterationRunner" scope="prototype">
    <property name="releaseManager" ref="releaseManager" />
    <property name="producerFactory" ref="messageProducerFactory"/>
    <property name="maxRatePerProducerThread" value="15000"/>
  </bean>

  <!-- The factory to create iteration runners -->
  <bean id="benchmarkIterationRunnerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="benchmarkIterationRunner"/>
    </property>
  </bean>

  <!-- A profile runner is responsible for executing a profile that consists of 1..n iterations -->
  <bean id="benchmarkProfileRunner" class="com.fusesource.forge.jmstest.executor.ProfileRunner" scope="prototype">
    <property name="releaseManager" ref="releaseManager" />
    <property name="iterationRunnerFactory" ref="benchmarkIterationRunnerFactory"/>
  </bean>

  <!-- The factory creating Profile runners as needed -->
  <bean id="benchmarkProfileRunnerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="benchmarkProfileRunner"/>
    </property>
  </bean>

  <!-- The Benchmark client Notifier sends out the Notification from the Producer to the consumers that the benchmark is about to start -->
  <bean id="clientNotifier" class="com.fusesource.forge.jmstest.executor.BenchmarkClientNotifier">
    <property name="releaseManager" ref="releaseManager" />
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
  </bean>  

  <!-- The consumer listener listens for the consumer responses (that they are ready to go) -->  
  <bean id="consumerListener" class="com.fusesource.forge.jmstest.executor.ConsumerToProducerListener">
    <property name="releaseManager" ref="releaseManager" />
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
  </bean> 

  <!-- The Benchmarkproducer wraps up creating and initializing the profile runner to execute the benchmark 
       from the producer side -->
  <bean id="benchmarkProducer" class="com.fusesource.forge.jmstest.executor.BenchmarkProducerWrapper">
    <property name="consumerListener" ref="consumerListener" />
    <property name="clientNotifier" ref="clientNotifier" />
    <property name="profileRunnerFactory" ref="benchmarkProfileRunnerFactory" /> 
    <property name="maxWaitTime" value="10" />
  </bean>
  
  <!-- The Benchmark Consumer is a simple JMS consumer consuming messages from the test destination. -->
  
  <bean id="messageConsumer" class="com.fusesource.forge.jmstest.executor.BenchmarkConsumer" scope="prototype" >
    <property name="releaseManager" ref="releaseManager" />
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
  </bean>

  <!--  The consumer factory is responsible for creating the consumers upon request -->
  <bean id="messageConsumerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="messageConsumer"/>
    </property>
  </bean>
 
  <!-- The Raw MetricsCollector is used to capture raw metrics as quickly as possible. These will be summarized asynchronously --> 
  <bean id="metricCollector" class="com.fusesource.forge.jmstest.benchmark.results.RawMetricCollector" />

  <!-- The BenchmarkConsumerWrapper encapsulates the creation of the desired number of consumers. Usually it is triggered by a 
       ProducerToConsumerNotifier --> 
  <bean id="messageConsumerWrapper" class="com.fusesource.forge.jmstest.executor.BenchmarkConsumerWrapper" >
    <property name="consumerFactory" ref="messageConsumerFactory" />
    <property name="metricCollector" ref="metricCollector" />
  </bean>  
  
  <!-- Finally consumer side is started by a Notification from the producer that the benchmark s about to start -->
  <bean id="producerListener" class="com.fusesource.forge.jmstest.executor.ProducerToConsumerListener" >
    <property name="releaseManager" ref="releaseManager" />
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
    <property name="consumerWrapper" ref="messageConsumerWrapper" />
  </bean>
  
  <!-- A metrics summariser is used to digest to raw metrics and produce a mor meaningful output -->  
  <bean id="metricSummariser" class="com.fusesource.forge.jmstest.benchmark.results.PerUnitMetricSummariser" />

  <!-- The metrics flusher triggers the summarizer periodically to dump the summarized metrics. -->
  <bean id="metricFlusher" class="com.fusesource.forge.jmstest.benchmark.results.CSVMetricFlusher" scope="prototype">
    <property name="resultsDir" value="~/tmp"/>
    <property name="summariser" ref="metricSummariser"/>
    <property name="collector" ref="metricCollector" />
  </bean>



  <bean id="AsyncProducerTemplate" class="com.fusesource.forge.jmstest.tests.AsyncProducer" scope="prototype">
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
    <property name="deliveryMode" value="NON_PERSISTENT" />
    <property name="messagesToSend" value="5" />
    <property name="messageFactory" ref="messageFactory" />
    <property name="expectReply" value="false" />
    <property name="sleep" value="100" />
    <property name="TTL" value="0" />
    <property name="destinationName" value="queue:test" />
  </bean>
  
  <bean id="AsyncProducerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="AsyncProducerTemplate" />
    </property>
  </bean>

  <bean id="AsyncConsumerTemplate" class="com.fusesource.forge.jmstest.tests.AsyncConsumer" scope="prototype">
    <property name="connectionProvider" ref="connectionProvider" />
    <property name="destinationProvider" ref="destinationProvider" />
    <property name="destinationName" value="queue:test" />
  </bean>

  <bean id="AsyncConsumerFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    <property name="targetBeanName">
      <idref local="AsyncConsumerTemplate" />
    </property>
  </bean>
</beans>
