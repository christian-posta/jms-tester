<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <bean id="tutorialBenchmark" class="com.fusesource.forge.jmstest.benchmark.BenchmarkConfig">

        <!--
        First, we give the benchmark a name. The name of the benchmark will be part of the names for all metrics that
        will be gathered and also this is the name of a subdirectory the recorder will create to hold this benchmarks
        data.
        -->
        <property name="benchmarkId" value="tutorialBenchmark"/>

        <!--
        Explanation of this thing:

        The next option might seem a bit strange as it points to the configuration locations for this benchmark.
        You may think “hold on a second – config locations as properties when I am already in this object?” – Yes,
        consider a more complex scenario where you might want to keep the benchmark definitions separate from the
        profiles and/or the accompanying objects. Then you would have knowledge about the file containing the benchmark
        configuration file as such, but not necessarily about the other objects.

        At the end of the day, the configLocations property holds a list of file and directory names, that is used to
        search for xml files, which would in turn be used to create a benchmark specific spring application context.
        -->
        <property name="configLocations">
            <list>
                <bean class="java.lang.String">
                    <constructor-arg value="conf/testScripts/tutorial"/>
                </bean>
            </list>
        </property>


        <!--
           This attribute contains a list of specifications which probes should be run on which host.
           The default configuration is to run all probes on all clients that are connected to the controller.
           You can refer to the distributed Tutorial to see a more complex configuration.
        -->
        <property name="probeConfigurations">
            <list>
                <bean class="com.fusesource.forge.jmstest.benchmark.command.BenchmarkProbeConfig">
                    <property name="clientNames" value="Monitor" />
                    <property name="jmxConnectionFactoryNames" ref="jmxConnectionResolver" />
                </bean>
            </list>
        </property>


        <!--
        The ultimate definition of the benchmark starts. As you can see, a benchmark consists of one or more
        parts, where each part would specify the benchmark execution on one JMS destination. Having more than one part
        would allow you to simulate simultaneous traffic on various destinations in one benchmark.

        As you can see the benchmark configuration allows you to set some basic JMS parameters. Note the number of
        consumers, this is the number of consumer for each client participating in the benchmark that is relevant for
        this benchmark part. If more than one producer client is identified, each of them will inject the message load
        defined in the profile.

        The profile name references the bean name of a spring bean that implements BenchmarkIteration.

        Further, the benchmark part references relevant clients by name. In our simple example we have started only one
        client named TestClient and we use the special name All, so that all clients would be matched for consumers and
        producers.
        -->
        <property name="benchmarkParts">
            <list>
                <bean class="com.fusesource.forge.jmstest.benchmark.BenchmarkPartConfig">
                    <property name="partID" value="producerPartConfig"/>
                    <property name="testDestinationName" value="queue:test1"/>
                    <property name="deliveryMode" value="NON_PERSISTENT"/>
                    <property name="acknowledgeMode" value="AUTO_ACKNOWLEDGE"/>
                    <property name="transacted" value="false"/>
                    <property name="numConsumers" value="0"/>
                    <property name="profileName" value="testProfile1"/>
                    <property name="producerClients" value="Producer"/>
                    <property name="consumerClients" value=""/>
                    <property name="maxConsumerRatePerThread" value="10"/>
                    <property name="connectionFactoryNames" ref="connFactoryResolver"/>

                </bean>
                <bean class="com.fusesource.forge.jmstest.benchmark.BenchmarkPartConfig">
                    <property name="partID" value="consumerPartConfig"/>
                    <property name="testDestinationName" value="queue:test1"/>
                    <property name="deliveryMode" value="NON_PERSISTENT"/>
                    <property name="acknowledgeMode" value="AUTO_ACKNOWLEDGE"/>
                    <property name="transacted" value="false"/>
                    <property name="numConsumers" value="1"/>
                    <property name="profileName" value="testProfile1"/>
                    <property name="consumerClients" value="Consumer"/>
                    <property name="producerClients" value=""/>
                    <property name="connectionFactoryNames" ref="connFactoryResolver"/>
                </bean>
            </list>
        </property>
    </bean>






    <!--
        Map different connection factories for different types of clients. For example, you can configure details
        about the connection factories used by the Consumer including prefetch. Note, the keys are regex that
        correspond to the clients defined in the Config Parts above
    -->
    <util:map id="connFactoryResolver">
        <entry key="Producer" value="producerConnectionFactory"/>
        <entry key="Consumer" value="consumerConnectionFactory"/>
    </util:map>

    <bean id="producerConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://ip-10-62-98-219.ec2.internal:61616"/>
    </bean>

    <bean id="consumerConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://ip-10-62-98-219.ec2.internal:61616?jms.prefetchPolicy.queuePrefetch=10"/>
    </bean>



    <!--
        Specify the load profiles here...
    -->
    <bean id="testProfile1" class="com.fusesource.forge.jmstest.scenario.SimpleBenchmarkIteration" scope="prototype">
        <property name="name" value="testProfile1"/>
        <property name="duration" value="10"/>
        <property name="initialRate" value="100"/>
        <property name="maxRate" value="250"/>
        <property name="increment" value="50"/>

    </bean>


    <!--
        Map clients to jmx connections... note, this doesn't need to be a map for a simple example like this,
        you could have just defined a "jmxConnection" bean without using the map, and the JMSTester would have
        figured it out, but we put it into a map for completion. You can add other key/values to the map to
        specify separate JMX connections for different brokers in your broker topology
    -->
    <util:map id="jmxConnectionResolver">
        <entry key="Monitor" value="monitorJmxConnection"/>
    </util:map>

    <bean id="monitorJmxConnection" class="com.fusesource.forge.jmstest.probe.jmx.JMXConnectionFactory" >
        <property name="url" value="service:jmx:rmi:///jndi/rmi://127.0.0.1:1099/jmxrmi" />
        <property name="username" value="smx" />
        <property name="password" value="smx" />
    </bean>

    <!--
        Let's set up the metrics we'll be monitoring
    -->
    <bean id="ThreadCounter" class="com.fusesource.forge.jmstest.probe.jmx.JMXProbe" scope="prototype">
        <property name="name" value="ThreadCounter" />
        <property name="objectNameString" value="java.lang:type=Threading" />
        <property name="attributeName" value="ThreadCount" />
    </bean>

    <bean id="test1Size" class="com.fusesource.forge.jmstest.probe.jmx.AMQDestinationProbe" scope="prototype">
        <constructor-arg value="test1" />
        <property name="brokerName" value="localhost" />
        <property name="attributeName" value="QueueSize" />
    </bean>

    <!-- Configure the machine related probes that should be run on ALL machines that host an ActiveMQ broker -->
    <bean id="CpuMonitor" class="com.fusesource.forge.jmstest.probe.sigar.CpuStat" >
        <property name="name" value="CpuMonitor" />
    </bean>

    <bean id="FreeMemory" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="FreeMemory" />
        <property name="type" value="MEMORY_FREE" />
    </bean>

    <bean id="TotalMemory" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="TotalMemory" />
        <property name="type" value="MEMORY_TOTAL" />
    </bean>

    <bean id="FreeSwap" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="FreeSwap" />
        <property name="type" value="SWAP_FREE" />
    </bean>

    <bean id="SwapTotal" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="SwapTotal" />
        <property name="type" value="SWAP_TOTAL" />
    </bean>

    <bean id="SwapIn" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="SwapIn" />
        <property name="type" value="SWAP_PAGE_IN" />
    </bean>

    <bean id="SwapOut" class="com.fusesource.forge.jmstest.probe.sigar.MemStat" >
        <property name="name" value="SwapOut" />
        <property name="type" value="SWAP_PAGE_OUT" />
    </bean>

    <bean id="DiskReadBytes" class="com.fusesource.forge.jmstest.probe.sigar.IOStat" >
        <property name="name" value="DiskReadBytes" />
        <property name="type" value="DISK_READ_BYTES" />
    </bean>

    <bean id="DiskWriteByte" class="com.fusesource.forge.jmstest.probe.sigar.IOStat" >
        <property name="name" value="DiskWriteBytes" />
        <property name="type" value="DISK_WRITE_BYTES" />
    </bean>

    <bean id="DiskReads" class="com.fusesource.forge.jmstest.probe.sigar.IOStat" >
        <property name="name" value="DiskReads" />
        <property name="type" value="DISK_READS" />
    </bean>

    <bean id="DiskWrites" class="com.fusesource.forge.jmstest.probe.sigar.IOStat" >
        <property name="name" value="DiskWrites" />
        <property name="type" value="DISK_WRITES" />
    </bean>

    <bean id="RxBytes" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="RxBytes" />
        <property name="type" value="RX_BYTES" />
    </bean>

    <bean id="RxPackets" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="RxPackets" />
        <property name="type" value="RX_PACKETS" />
    </bean>

    <bean id="TxBytes" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="TxBytes" />
        <property name="type" value="TX_BYTES" />
    </bean>

    <bean id="TxPackets" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="TxPackets" />
        <property name="type" value="TX_PACKETS" />
    </bean>

    <bean id="RxDropped" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="RxDropped" />
        <property name="type" value="RX_DROPPED" />
    </bean>

    <bean id="TxDropped" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="TxDropped" />
        <property name="type" value="TX_DROPPED" />
    </bean>

    <bean id="RxErrors" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="RxErrors" />
        <property name="type" value="RX_ERRORS" />
    </bean>

    <bean id="TxErrors" class="com.fusesource.forge.jmstest.probe.sigar.NetworkIOStat" >
        <property name="name" value="TxErrors" />
        <property name="type" value="TX_ERRORS" />
    </bean>

</beans>